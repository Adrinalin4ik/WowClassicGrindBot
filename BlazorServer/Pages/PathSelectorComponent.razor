@using Libs
@inject Libs.IBotController botController
@inject Libs.IAddonReader addonReader

<div class="card @(Hide ? "hide" : "")" style="margin-top: 10px">
    <div class="card-header">
        <button class="btn btn-sm btn-primary" @onclick="RefreshData">
            <span class="glyphicon glyphicon-refresh"></span>
        </button>

        Path Profile

        <select name="listbox" id="listbox" @onchange="OnListBoxChanged" runat="server">
            @foreach (var item in files)
            {
                <option value="@item" selected="@(selectedPath == @item ? "selected" : null)">
                    @item
                </option>
            }
        </select>

        <button class="btn btn-sm btn-primary float-right" @onclick="LoadPath" disabled="@(disableButton ? "disabled" : null)">
            <span>Load Path</span>
        </button>
    </div>
</div>

@code {

    [Parameter]
    public bool Hide { get; set; } = false;

    List<string> files = new List<string> { string.Empty };

    string selectedPath = String.Empty;
    bool disableButton = true;

    protected override void OnInitialized()
    {
        if (Libs.DataFrameConfiguration.ConfigurationExists())
        {
            RefreshData();
            ValidateButton();

            botController.ProfileLoaded -= OnProfileLoaded;
            botController.ProfileLoaded += OnProfileLoaded;

            ((Libs.AddonReader)addonReader).AddonDataChanged += (o, e) =>
            {
                base.InvokeAsync(() =>
                {
                    try
                    {
                        StateHasChanged();
                    }
                    catch { }
                });
            };
        }
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void LoadPath()
    {
        botController.LoadPathProfile(selectedPath);
    }

    private void OnListBoxChanged(ChangeEventArgs changeEventArgs)
    {
        selectedPath = (string)changeEventArgs.Value;
        if(selectedPath.Contains("Use Class Profile Default"))
        {
            selectedPath = string.Empty;
        }

        ValidateButton();
    }

    private void OnProfileLoaded(object? sender, EventArgs e)
    {
        ValidateButton();
    }

    private void ValidateButton()
    {
        disableButton = string.IsNullOrEmpty(botController.SelectedClassFilename);
    }

    private void RefreshData()
    {
        files = botController.PathFileList();
        selectedPath = botController.SelectedPathFilename ?? string.Empty;
    }

}